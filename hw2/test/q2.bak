(define last-element
   (lambda (lst)
     (if (empty? lst) lst
      (if (equal? (cdr lst) '()) (car lst)
          ( last-element (cdr lst))))))



(define power
    (lambda (n1 n2)
       (if (= n2 0) 1 (* n1 (power n1 (- n2 1))))))

     
(define sum-lst-power
    (lambda (lst n)
     ( if (empty? lst) 0
      (+ (power (car lst) n) (sum-lst-power (cdr lst) n)))))

  
(define num-from-digits
  (lambda (lst)
    (if (empty? lst) 0
    (+ (* (car lst) (power 10 (- (size lst) 1))) (num-from-digits (cdr lst)))
  )
))


      
(define is-narcissistic
  (lambda (lst)
     (if (equal? (sum-lst-power lst (size lst)) (num-from-digits lst)) #t  #f)))


 
 (define size (lambda (lst) (if (empty? lst) 0 (+ 1 (size (cdr lst)))))) 